#!/bin/sh

export __fxcrd_IFS="
"

export __fxcrd_MACROS="Macro List"

__fxcrd_INIT_WHITESPACE="  "

__fxcrd_macro() {
  local name="$1"
  local data="@$name:"
  shift

  local OPTIND=1
  while getopts "f:i:em" arg; do
    case "$arg" in
      i)
        eval "__fxcrd_MACROFUNC_INLINE_$name() {
          $OPTARG
        }"
        data="$data i=__fxcrd_MACROFUNC_INLINE_$name"
        ;;
      f)
        data="$data f=$OPTARG"
        ;;
      e|m)
        data="$data $arg"
        ;;
    esac
  done
  if echo "$__fxcrd_MACROS" | grep -qE "@$name:"; then
    __fxcrd_MACROS="$(echo $__fxcrd_MACROS | sed -e "s/@$name:.*/$data/")"
  else
    __fxcrd_MACROS="$(printf "%s\n  %s\n" "$__fxcrd_MACROS" "$data")"
  fi
}

__fxcrd_expand_macros() {
  if [ "$1" = "-i" ]; then
    local interactive=true
    local prompt_top="$3:==> "
    local prompt_cnt="$3: >> "
    local ipid="$2"
  else
    local interactive=false
    local prompt_top=""
    local prompt_cnt=""
    local ipid="0"
  fi

  local line="--"
  local transformed=1
  local IFS="$__fxcrd_IFS"
  [ -n "$ZSH_VERSION" ] && setopt local_options shwordsplit

  while echo -n "$prompt_top" && IFS="" read -r line; do
    if echo "$line" | grep -qP "@[a-zA-Z]"; then
      local premacro="$(echo "$line" | grep -oP "^[^@]*")"
      local macro="$(echo "$line" | grep -oP "@[^\s]+" | head -1)"
      local macroargs="$(echo "$line" | grep -oP "(?<=$macro).*")"
      local macroinput="--"
      local endwhitespace=""
      if ! ( echo "$macroargs" | grep -qP "\s@@" ); then
        local printit=true
        local nmacros=1
        while [ ! "$nmacros" = "0" ]; do
          echo -n "$prompt_cnt"
          if IFS="" read -r inputline; then
            if echo "$inputline" | grep -qE "@end"; then
              nmacros=$(($nmacros - 1))
              if [ "$nmacros" = "0" ]; then
                printit=false
                endwhitespace="$(echo "$inputline" | grep -oE "^\s*")"
              fi
            elif echo "$inputline" | grep -qP "@[a-zA-Z]" && ! echo "$inputline" | grep -qE "@@"; then
              nmacros=$(($nmacros + 1))
            fi
 
            if [ "$printit" = "true" ]; then
              macroinput="$(printf "%s\n%s\n" "$macroinput" "$inputline")"
            else
              macroinput="$(printf "%s\n" "$macroinput")"
            fi
          else
            echo "#macro failure ($macro), EOF reached when looking for macro @end."
            $interactive && kill -10 $ipid
            return 1
          fi
        done
        macroinput="$(echo "$macroinput" | tail -n+2 | sed -e "s/^$__fxcrd_INIT_WHITESPACE$endwhitespace//")"
      else
        macroinput="$(echo "$macroargs" | grep -oP "(?<=@@).+\$")"
        macroargs="$( echo "$macroargs" | grep -oP "^[^@]+")"
      fi
      macroargs="$(echo "$macroargs" | grep -oP "((?!<\\\)[\"\'].*?(?!<\\\)[\"\']|[^\s]+)")"
      local data="$(echo "$__fxcrd_MACROS" | grep -oP "$macro:.*")"
      local func="$(echo "$data" | grep -oP "(?<=f=)[^\s]+")"
      local inln="$(echo "$data" | grep -oP "(?<=i=)[^\s]+")"
      local evlt="$(echo "$data" | grep -oP "(?<=\s)e")"
      local meta="$(echo "$data" | grep -oP "(?<=\s)m")"
      local transform=""
      if [ -n "$data" ] && [ -z "$func" ] && [ -z "$inln" ]; then
        echo "#macro failure ($macro), no transformation method (-f / -i missing)."
        $interactive && kill -10 $ipid
      elif [ -n "$data" ]; then
        [ -n "$func" ] && transform="$func" || transform="$inln"
        local __fxcrd_WHITESPACE="$(($(echo "$endwhitespace" | wc -m)-1))"
        if [ -n "$evlt" ]; then
          macroargs="$(echo "$macroargs" | while read -r arg; do eval "echo \"$arg\""; done)"
        fi
        local macro_result="$premacro$(echo "$macroinput" | $transform $macroargs)"
        while macro_result="$(echo "$macro_result" |  __fxcrd_expand_macros)"; do true; done
        if [ -n "$meta" ]; then
          eval "$macro_result"
        else
          echo "$macro_result"
        fi
        transformed=0
        $interactive && kill -10 $ipid
      else
        echo "#macro failure ($macro), the macro doesn't exist."
        $interactive && kill -10 $ipid
      fi
    else
      echo "$line"
      $interactive && kill -10 $ipid
    fi
  done
  return $transformed
}

__fxcrd_macro_maker() {
  local __fxcrd_name="$1"
  shift

  echo "
    __fxcrd_MACROFUNC_$__fxcrd_name() {
      $(cat)
    }
    __fxcrd_macro $__fxcrd_name $@ -f __fxcrd_MACROFUNC_$__fxcrd_name
  "
}
__fxcrd_macro 'macro' -m -f "__fxcrd_macro_maker"

__fxcrd_code() {
  if [ "$1" = "-s" ]; then
    echo "echo '$(cat)'"
  else
    echo "echo \"$(cat)\""
  fi
}

__fxcrd_macro 'code' -f "__fxcrd_code"

